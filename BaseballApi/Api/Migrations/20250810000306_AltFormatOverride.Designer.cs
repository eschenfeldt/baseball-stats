// <auto-generated />
using System;
using BaseballApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BaseballApi.Migrations
{
    [DbContext(typeof(BaseballContext))]
    [Migration("20250810000306_AltFormatOverride")]
    partial class AltFormatOverride
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BaseballApi.Models.AlternateParkName", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ParkId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParkId");

                    b.ToTable("AlternateParkNames");
                });

            modelBuilder.Entity("BaseballApi.Models.AlternateTeamName", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("AlternateTeamNames");
                });

            modelBuilder.Entity("BaseballApi.Models.Batter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AtBats")
                        .HasColumnType("integer");

                    b.Property<int>("AtBatsWithRunnersInScoringPosition")
                        .HasColumnType("integer");

                    b.Property<long>("BoxScoreId")
                        .HasColumnType("bigint");

                    b.Property<int>("BuntSingles")
                        .HasColumnType("integer");

                    b.Property<int>("CatchersInterference")
                        .HasColumnType("integer");

                    b.Property<int>("CaughtStealing")
                        .HasColumnType("integer");

                    b.Property<int>("Doubles")
                        .HasColumnType("integer");

                    b.Property<int>("FieldersChoices")
                        .HasColumnType("integer");

                    b.Property<int>("Games")
                        .HasColumnType("integer");

                    b.Property<int>("GroundedIntoDoublePlay")
                        .HasColumnType("integer");

                    b.Property<int>("GroundedIntoTriplePlay")
                        .HasColumnType("integer");

                    b.Property<int>("HitByPitch")
                        .HasColumnType("integer");

                    b.Property<int>("Hits")
                        .HasColumnType("integer");

                    b.Property<int>("HitsWithRunnersInScoringPosition")
                        .HasColumnType("integer");

                    b.Property<int>("Homeruns")
                        .HasColumnType("integer");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("PlateAppearances")
                        .HasColumnType("integer");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("ReachedOnError")
                        .HasColumnType("integer");

                    b.Property<int>("Runs")
                        .HasColumnType("integer");

                    b.Property<int>("RunsBattedIn")
                        .HasColumnType("integer");

                    b.Property<int>("SacrificeBunts")
                        .HasColumnType("integer");

                    b.Property<int>("SacrificeFlies")
                        .HasColumnType("integer");

                    b.Property<int>("Sacrifices")
                        .HasColumnType("integer");

                    b.Property<int>("Singles")
                        .HasColumnType("integer");

                    b.Property<int>("StolenBases")
                        .HasColumnType("integer");

                    b.Property<int>("Strikeouts")
                        .HasColumnType("integer");

                    b.Property<int>("StrikeoutsCalled")
                        .HasColumnType("integer");

                    b.Property<int>("StrikeoutsSwinging")
                        .HasColumnType("integer");

                    b.Property<int>("Triples")
                        .HasColumnType("integer");

                    b.Property<int>("Walks")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BoxScoreId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("BoxScoreId", "PlayerId")
                        .IsUnique();

                    b.ToTable("Batters");
                });

            modelBuilder.Entity("BaseballApi.Models.BoxScore", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("TeamId");

                    b.HasIndex("GameId", "TeamId")
                        .IsUnique();

                    b.ToTable("BoxScores");
                });

            modelBuilder.Entity("BaseballApi.Models.FangraphsConstants", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CFIP")
                        .HasColumnType("numeric");

                    b.Property<decimal>("RPA")
                        .HasColumnType("numeric");

                    b.Property<decimal>("RW")
                        .HasColumnType("numeric");

                    b.Property<decimal>("RunCS")
                        .HasColumnType("numeric");

                    b.Property<decimal>("RunSB")
                        .HasColumnType("numeric");

                    b.Property<decimal>("W1B")
                        .HasColumnType("numeric");

                    b.Property<decimal>("W2B")
                        .HasColumnType("numeric");

                    b.Property<decimal>("W3B")
                        .HasColumnType("numeric");

                    b.Property<decimal>("WBB")
                        .HasColumnType("numeric");

                    b.Property<decimal>("WHBP")
                        .HasColumnType("numeric");

                    b.Property<decimal>("WHR")
                        .HasColumnType("numeric");

                    b.Property<decimal>("WOBA")
                        .HasColumnType("numeric");

                    b.Property<decimal>("WOBAScale")
                        .HasColumnType("numeric");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Year")
                        .IsUnique();

                    b.ToTable("Constants");
                });

            modelBuilder.Entity("BaseballApi.Models.Fielder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Assists")
                        .HasColumnType("integer");

                    b.Property<long>("BoxScoreId")
                        .HasColumnType("bigint");

                    b.Property<int>("CaughtStealing")
                        .HasColumnType("integer");

                    b.Property<int>("DoublePlays")
                        .HasColumnType("integer");

                    b.Property<int>("Errors")
                        .HasColumnType("integer");

                    b.Property<int>("ErrorsFielding")
                        .HasColumnType("integer");

                    b.Property<int>("ErrorsThrowing")
                        .HasColumnType("integer");

                    b.Property<int>("Games")
                        .HasColumnType("integer");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("PassedBalls")
                        .HasColumnType("integer");

                    b.Property<int>("PickoffFailed")
                        .HasColumnType("integer");

                    b.Property<int>("PickoffSuccess")
                        .HasColumnType("integer");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Putouts")
                        .HasColumnType("integer");

                    b.Property<int>("StolenBaseAttempts")
                        .HasColumnType("integer");

                    b.Property<int>("TriplePlays")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BoxScoreId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("BoxScoreId", "PlayerId")
                        .IsUnique();

                    b.ToTable("Fielders");
                });

            modelBuilder.Entity("BaseballApi.Models.Game", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AwayBoxScoreId")
                        .HasColumnType("bigint");

                    b.Property<long>("AwayId")
                        .HasColumnType("bigint");

                    b.Property<int?>("AwayScore")
                        .HasColumnType("integer");

                    b.Property<string>("AwayTeamName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<int?>("GameType")
                        .HasColumnType("integer");

                    b.Property<long?>("HomeBoxScoreId")
                        .HasColumnType("bigint");

                    b.Property<long>("HomeId")
                        .HasColumnType("bigint");

                    b.Property<int?>("HomeScore")
                        .HasColumnType("integer");

                    b.Property<string>("HomeTeamName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LosingPitcherId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LosingTeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("SavingPitcherId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ScheduledTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ScorecardId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("WinningPitcherId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WinningTeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AwayBoxScoreId");

                    b.HasIndex("AwayId");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasFilter("\"ExternalId\" != '00000000-0000-0000-0000-000000000000'");

                    b.HasIndex("HomeBoxScoreId");

                    b.HasIndex("HomeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("LosingPitcherId");

                    b.HasIndex("LosingTeamId");

                    b.HasIndex("SavingPitcherId");

                    b.HasIndex("ScorecardId")
                        .IsUnique();

                    b.HasIndex("WinningPitcherId");

                    b.HasIndex("WinningTeamId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("BaseballApi.Models.MediaImportInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BaseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FilesDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MediaImportTaskId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhotoFileName")
                        .HasColumnType("text");

                    b.Property<string>("PhotoFilePath")
                        .HasColumnType("text");

                    b.Property<int>("ResourceType")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("VideoFileName")
                        .HasColumnType("text");

                    b.Property<string>("VideoFilePath")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MediaImportTaskId");

                    b.ToTable("MediaImportInfo");
                });

            modelBuilder.Entity("BaseballApi.Models.MediaImportTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("GameId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("MediaImportTasks");
                });

            modelBuilder.Entity("BaseballApi.Models.Park", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Parks");
                });

            modelBuilder.Entity("BaseballApi.Models.Pitcher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AirOuts")
                        .HasColumnType("integer");

                    b.Property<int>("Balks")
                        .HasColumnType("integer");

                    b.Property<int>("Balls")
                        .HasColumnType("integer");

                    b.Property<int>("BattersFaced")
                        .HasColumnType("integer");

                    b.Property<long>("BoxScoreId")
                        .HasColumnType("bigint");

                    b.Property<int>("EarnedRuns")
                        .HasColumnType("integer");

                    b.Property<int>("FirstPitchBalls")
                        .HasColumnType("integer");

                    b.Property<int>("FirstPitchStrikes")
                        .HasColumnType("integer");

                    b.Property<int>("Games")
                        .HasColumnType("integer");

                    b.Property<int>("GroundOuts")
                        .HasColumnType("integer");

                    b.Property<int>("HitByPitch")
                        .HasColumnType("integer");

                    b.Property<int>("Hits")
                        .HasColumnType("integer");

                    b.Property<int>("Homeruns")
                        .HasColumnType("integer");

                    b.Property<int>("IntentionalWalks")
                        .HasColumnType("integer");

                    b.Property<int>("Losses")
                        .HasColumnType("integer");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("Pitches")
                        .HasColumnType("integer");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Runs")
                        .HasColumnType("integer");

                    b.Property<int>("Saves")
                        .HasColumnType("integer");

                    b.Property<int>("Strikeouts")
                        .HasColumnType("integer");

                    b.Property<int>("StrikeoutsCalled")
                        .HasColumnType("integer");

                    b.Property<int>("StrikeoutsSwinging")
                        .HasColumnType("integer");

                    b.Property<int>("Strikes")
                        .HasColumnType("integer");

                    b.Property<int>("ThirdInningsPitched")
                        .HasColumnType("integer");

                    b.Property<int>("Walks")
                        .HasColumnType("integer");

                    b.Property<int>("WildPitches")
                        .HasColumnType("integer");

                    b.Property<int>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BoxScoreId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("BoxScoreId", "PlayerId")
                        .IsUnique();

                    b.ToTable("Pitchers");
                });

            modelBuilder.Entity("BaseballApi.Models.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<string>("FangraphsPage")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Suffix")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("BaseballApi.Models.RemoteFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameModifier")
                        .HasColumnType("text");

                    b.Property<int>("Purpose")
                        .HasColumnType("integer");

                    b.Property<long>("ResourceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("ResourceId", "NameModifier", "Extension")
                        .IsUnique();

                    b.ToTable("RemoteFile");
                });

            modelBuilder.Entity("BaseballApi.Models.RemoteResource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("AssetIdentifier")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssetIdentifier")
                        .IsUnique();

                    b.ToTable("RemoteResource");

                    b.HasDiscriminator<string>("Discriminator").HasValue("RemoteResource");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BaseballApi.Models.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ColorHex")
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<long?>("HomeParkId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HomeParkId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("MediaResourcePlayer", b =>
                {
                    b.Property<long>("MediaId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayersId")
                        .HasColumnType("bigint");

                    b.HasKey("MediaId", "PlayersId");

                    b.HasIndex("PlayersId");

                    b.ToTable("MediaResourcePlayer");
                });

            modelBuilder.Entity("BaseballApi.Models.MediaResource", b =>
                {
                    b.HasBaseType("BaseballApi.Models.RemoteResource");

                    b.Property<bool?>("AlternateFormatOverride")
                        .HasColumnType("boolean");

                    b.Property<bool>("Favorite")
                        .HasColumnType("boolean");

                    b.Property<long?>("GameId")
                        .HasColumnType("bigint");

                    b.Property<int>("ResourceType")
                        .HasColumnType("integer");

                    b.HasIndex("GameId");

                    b.HasDiscriminator().HasValue("MediaResource");
                });

            modelBuilder.Entity("BaseballApi.Models.Scorecard", b =>
                {
                    b.HasBaseType("BaseballApi.Models.RemoteResource");

                    b.HasDiscriminator().HasValue("Scorecard");
                });

            modelBuilder.Entity("BaseballApi.Models.AlternateParkName", b =>
                {
                    b.HasOne("BaseballApi.Models.Park", null)
                        .WithMany("AlternateParkNames")
                        .HasForeignKey("ParkId");
                });

            modelBuilder.Entity("BaseballApi.Models.AlternateTeamName", b =>
                {
                    b.HasOne("BaseballApi.Models.Team", null)
                        .WithMany("AlternateTeamNames")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("BaseballApi.Models.Batter", b =>
                {
                    b.HasOne("BaseballApi.Models.BoxScore", "BoxScore")
                        .WithMany("Batters")
                        .HasForeignKey("BoxScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseballApi.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoxScore");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BaseballApi.Models.BoxScore", b =>
                {
                    b.HasOne("BaseballApi.Models.Game", "Game")
                        .WithMany("BoxScores")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseballApi.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("BaseballApi.Models.Fielder", b =>
                {
                    b.HasOne("BaseballApi.Models.BoxScore", "BoxScore")
                        .WithMany("Fielders")
                        .HasForeignKey("BoxScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseballApi.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoxScore");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BaseballApi.Models.Game", b =>
                {
                    b.HasOne("BaseballApi.Models.BoxScore", "AwayBoxScore")
                        .WithMany()
                        .HasForeignKey("AwayBoxScoreId");

                    b.HasOne("BaseballApi.Models.Team", "Away")
                        .WithMany()
                        .HasForeignKey("AwayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseballApi.Models.BoxScore", "HomeBoxScore")
                        .WithMany()
                        .HasForeignKey("HomeBoxScoreId");

                    b.HasOne("BaseballApi.Models.Team", "Home")
                        .WithMany()
                        .HasForeignKey("HomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseballApi.Models.Park", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("BaseballApi.Models.Player", "LosingPitcher")
                        .WithMany()
                        .HasForeignKey("LosingPitcherId");

                    b.HasOne("BaseballApi.Models.Team", "LosingTeam")
                        .WithMany()
                        .HasForeignKey("LosingTeamId");

                    b.HasOne("BaseballApi.Models.Player", "SavingPitcher")
                        .WithMany()
                        .HasForeignKey("SavingPitcherId");

                    b.HasOne("BaseballApi.Models.Scorecard", "Scorecard")
                        .WithOne("Game")
                        .HasForeignKey("BaseballApi.Models.Game", "ScorecardId");

                    b.HasOne("BaseballApi.Models.Player", "WinningPitcher")
                        .WithMany()
                        .HasForeignKey("WinningPitcherId");

                    b.HasOne("BaseballApi.Models.Team", "WinningTeam")
                        .WithMany()
                        .HasForeignKey("WinningTeamId");

                    b.Navigation("Away");

                    b.Navigation("AwayBoxScore");

                    b.Navigation("Home");

                    b.Navigation("HomeBoxScore");

                    b.Navigation("Location");

                    b.Navigation("LosingPitcher");

                    b.Navigation("LosingTeam");

                    b.Navigation("SavingPitcher");

                    b.Navigation("Scorecard");

                    b.Navigation("WinningPitcher");

                    b.Navigation("WinningTeam");
                });

            modelBuilder.Entity("BaseballApi.Models.MediaImportInfo", b =>
                {
                    b.HasOne("BaseballApi.Models.MediaImportTask", "MediaImportTask")
                        .WithMany("MediaToProcess")
                        .HasForeignKey("MediaImportTaskId");

                    b.Navigation("MediaImportTask");
                });

            modelBuilder.Entity("BaseballApi.Models.MediaImportTask", b =>
                {
                    b.HasOne("BaseballApi.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("BaseballApi.Models.Pitcher", b =>
                {
                    b.HasOne("BaseballApi.Models.BoxScore", "BoxScore")
                        .WithMany("Pitchers")
                        .HasForeignKey("BoxScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseballApi.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoxScore");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BaseballApi.Models.RemoteFile", b =>
                {
                    b.HasOne("BaseballApi.Models.RemoteResource", "Resource")
                        .WithMany("Files")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("BaseballApi.Models.Team", b =>
                {
                    b.HasOne("BaseballApi.Models.Park", "HomePark")
                        .WithMany()
                        .HasForeignKey("HomeParkId");

                    b.Navigation("HomePark");
                });

            modelBuilder.Entity("MediaResourcePlayer", b =>
                {
                    b.HasOne("BaseballApi.Models.MediaResource", null)
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseballApi.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BaseballApi.Models.MediaResource", b =>
                {
                    b.HasOne("BaseballApi.Models.Game", "Game")
                        .WithMany("Media")
                        .HasForeignKey("GameId");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("BaseballApi.Models.BoxScore", b =>
                {
                    b.Navigation("Batters");

                    b.Navigation("Fielders");

                    b.Navigation("Pitchers");
                });

            modelBuilder.Entity("BaseballApi.Models.Game", b =>
                {
                    b.Navigation("BoxScores");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("BaseballApi.Models.MediaImportTask", b =>
                {
                    b.Navigation("MediaToProcess");
                });

            modelBuilder.Entity("BaseballApi.Models.Park", b =>
                {
                    b.Navigation("AlternateParkNames");
                });

            modelBuilder.Entity("BaseballApi.Models.RemoteResource", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("BaseballApi.Models.Team", b =>
                {
                    b.Navigation("AlternateTeamNames");
                });

            modelBuilder.Entity("BaseballApi.Models.Scorecard", b =>
                {
                    b.Navigation("Game");
                });
#pragma warning restore 612, 618
        }
    }
}
