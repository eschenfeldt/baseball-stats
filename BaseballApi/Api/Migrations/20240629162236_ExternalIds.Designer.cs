// <auto-generated />
using System;
using BaseballApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BaseballApi.Migrations
{
    [DbContext(typeof(BaseballContext))]
    [Migration("20240629162236_ExternalIds")]
    partial class ExternalIds
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BaseballApi.AlternateParkName", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ParkId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParkId");

                    b.ToTable("AlternateParkNames");
                });

            modelBuilder.Entity("BaseballApi.AlternateTeamName", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("AlternateTeamNames");
                });

            modelBuilder.Entity("BaseballApi.Batter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AtBats")
                        .HasColumnType("integer");

                    b.Property<int>("AtBatsWithRunnersInScoringPosition")
                        .HasColumnType("integer");

                    b.Property<long>("BoxScoreId")
                        .HasColumnType("bigint");

                    b.Property<int>("BuntSingles")
                        .HasColumnType("integer");

                    b.Property<int>("CatchersInterference")
                        .HasColumnType("integer");

                    b.Property<int>("CaughtStealing")
                        .HasColumnType("integer");

                    b.Property<int>("Doubles")
                        .HasColumnType("integer");

                    b.Property<int>("FieldersChoices")
                        .HasColumnType("integer");

                    b.Property<int>("Games")
                        .HasColumnType("integer");

                    b.Property<int>("GroundedIntoDoublePlay")
                        .HasColumnType("integer");

                    b.Property<int>("GroundedIntoTriplePlay")
                        .HasColumnType("integer");

                    b.Property<int>("HitByPitch")
                        .HasColumnType("integer");

                    b.Property<int>("Hits")
                        .HasColumnType("integer");

                    b.Property<int>("HitsWithRunnersInScoringPosition")
                        .HasColumnType("integer");

                    b.Property<int>("Homeruns")
                        .HasColumnType("integer");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("PlateAppearances")
                        .HasColumnType("integer");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("ReachedOnError")
                        .HasColumnType("integer");

                    b.Property<int>("Runs")
                        .HasColumnType("integer");

                    b.Property<int>("RunsBattedIn")
                        .HasColumnType("integer");

                    b.Property<int>("SacrificeBunts")
                        .HasColumnType("integer");

                    b.Property<int>("SacrificeFlies")
                        .HasColumnType("integer");

                    b.Property<int>("Sacrifices")
                        .HasColumnType("integer");

                    b.Property<int>("Singles")
                        .HasColumnType("integer");

                    b.Property<int>("StolenBases")
                        .HasColumnType("integer");

                    b.Property<int>("Strikeouts")
                        .HasColumnType("integer");

                    b.Property<int>("StrikeoutsCalled")
                        .HasColumnType("integer");

                    b.Property<int>("StrikeoutsSwinging")
                        .HasColumnType("integer");

                    b.Property<int>("Triples")
                        .HasColumnType("integer");

                    b.Property<int>("Walks")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BoxScoreId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Batters");
                });

            modelBuilder.Entity("BaseballApi.BoxScore", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GameId")
                        .IsUnique();

                    b.ToTable("BoxScores");
                });

            modelBuilder.Entity("BaseballApi.Fielder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Assists")
                        .HasColumnType("integer");

                    b.Property<long>("BoxScoreId")
                        .HasColumnType("bigint");

                    b.Property<int>("CaughtStealing")
                        .HasColumnType("integer");

                    b.Property<int>("DoublePlays")
                        .HasColumnType("integer");

                    b.Property<int>("Errors")
                        .HasColumnType("integer");

                    b.Property<int>("ErrorsFielding")
                        .HasColumnType("integer");

                    b.Property<int>("ErrorsThrowing")
                        .HasColumnType("integer");

                    b.Property<int>("Games")
                        .HasColumnType("integer");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("PassedBalls")
                        .HasColumnType("integer");

                    b.Property<int>("PickoffFailed")
                        .HasColumnType("integer");

                    b.Property<int>("PickoffSuccess")
                        .HasColumnType("integer");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Putouts")
                        .HasColumnType("integer");

                    b.Property<int>("StolenBaseAttempts")
                        .HasColumnType("integer");

                    b.Property<int>("TriplePlays")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BoxScoreId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Fielders");
                });

            modelBuilder.Entity("BaseballApi.Models.Game", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AwayId")
                        .HasColumnType("bigint");

                    b.Property<int?>("AwayScore")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<int>("GameType")
                        .HasColumnType("integer");

                    b.Property<long>("HomeId")
                        .HasColumnType("bigint");

                    b.Property<int?>("HomeScore")
                        .HasColumnType("integer");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LosingPitcherId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("SavingPitcherId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ScheduledTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("WinningPitcherId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WinningTeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AwayId");

                    b.HasIndex("HomeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("LosingPitcherId");

                    b.HasIndex("SavingPitcherId");

                    b.HasIndex("WinningPitcherId");

                    b.HasIndex("WinningTeamId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("BaseballApi.Park", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Parks");
                });

            modelBuilder.Entity("BaseballApi.Pitcher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AirOuts")
                        .HasColumnType("integer");

                    b.Property<int>("Balks")
                        .HasColumnType("integer");

                    b.Property<int>("Balls")
                        .HasColumnType("integer");

                    b.Property<int>("BattersFaced")
                        .HasColumnType("integer");

                    b.Property<long>("BoxScoreId")
                        .HasColumnType("bigint");

                    b.Property<int>("EarnedRuns")
                        .HasColumnType("integer");

                    b.Property<int>("FirstPitchBalls")
                        .HasColumnType("integer");

                    b.Property<int>("FirstPitchStrikes")
                        .HasColumnType("integer");

                    b.Property<int>("Games")
                        .HasColumnType("integer");

                    b.Property<int>("GroundOuts")
                        .HasColumnType("integer");

                    b.Property<int>("HitByPitch")
                        .HasColumnType("integer");

                    b.Property<int>("Hits")
                        .HasColumnType("integer");

                    b.Property<int>("Homeruns")
                        .HasColumnType("integer");

                    b.Property<int>("IntentionalWalks")
                        .HasColumnType("integer");

                    b.Property<int>("Losses")
                        .HasColumnType("integer");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("Pitches")
                        .HasColumnType("integer");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Runs")
                        .HasColumnType("integer");

                    b.Property<int>("Saves")
                        .HasColumnType("integer");

                    b.Property<int>("Strikeouts")
                        .HasColumnType("integer");

                    b.Property<int>("StrikeoutsCalled")
                        .HasColumnType("integer");

                    b.Property<int>("StrikeoutsSwinging")
                        .HasColumnType("integer");

                    b.Property<int>("Strikes")
                        .HasColumnType("integer");

                    b.Property<int>("ThirdInningsPitched")
                        .HasColumnType("integer");

                    b.Property<int>("Walks")
                        .HasColumnType("integer");

                    b.Property<int>("WildPitches")
                        .HasColumnType("integer");

                    b.Property<int>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BoxScoreId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Pitchers");
                });

            modelBuilder.Entity("BaseballApi.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<string>("FangraphsPage")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Suffix")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("BaseballApi.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<long?>("HomeParkId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HomeParkId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("BaseballApi.AlternateParkName", b =>
                {
                    b.HasOne("BaseballApi.Park", null)
                        .WithMany("AlternateParkNames")
                        .HasForeignKey("ParkId");
                });

            modelBuilder.Entity("BaseballApi.AlternateTeamName", b =>
                {
                    b.HasOne("BaseballApi.Team", null)
                        .WithMany("AlternateTeamNames")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("BaseballApi.Batter", b =>
                {
                    b.HasOne("BaseballApi.BoxScore", "BoxScore")
                        .WithMany("Batters")
                        .HasForeignKey("BoxScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseballApi.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoxScore");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BaseballApi.BoxScore", b =>
                {
                    b.HasOne("BaseballApi.Models.Game", "Game")
                        .WithOne("BoxScore")
                        .HasForeignKey("BaseballApi.BoxScore", "GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("BaseballApi.Fielder", b =>
                {
                    b.HasOne("BaseballApi.BoxScore", "BoxScore")
                        .WithMany("Fielders")
                        .HasForeignKey("BoxScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseballApi.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoxScore");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BaseballApi.Models.Game", b =>
                {
                    b.HasOne("BaseballApi.Team", "Away")
                        .WithMany()
                        .HasForeignKey("AwayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseballApi.Team", "Home")
                        .WithMany()
                        .HasForeignKey("HomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseballApi.Park", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("BaseballApi.Player", "LosingPitcher")
                        .WithMany()
                        .HasForeignKey("LosingPitcherId");

                    b.HasOne("BaseballApi.Player", "SavingPitcher")
                        .WithMany()
                        .HasForeignKey("SavingPitcherId");

                    b.HasOne("BaseballApi.Player", "WinningPitcher")
                        .WithMany()
                        .HasForeignKey("WinningPitcherId");

                    b.HasOne("BaseballApi.Team", "WinningTeam")
                        .WithMany()
                        .HasForeignKey("WinningTeamId");

                    b.Navigation("Away");

                    b.Navigation("Home");

                    b.Navigation("Location");

                    b.Navigation("LosingPitcher");

                    b.Navigation("SavingPitcher");

                    b.Navigation("WinningPitcher");

                    b.Navigation("WinningTeam");
                });

            modelBuilder.Entity("BaseballApi.Pitcher", b =>
                {
                    b.HasOne("BaseballApi.BoxScore", "BoxScore")
                        .WithMany("Pitchers")
                        .HasForeignKey("BoxScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseballApi.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoxScore");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BaseballApi.Team", b =>
                {
                    b.HasOne("BaseballApi.Park", "HomePark")
                        .WithMany()
                        .HasForeignKey("HomeParkId");

                    b.Navigation("HomePark");
                });

            modelBuilder.Entity("BaseballApi.BoxScore", b =>
                {
                    b.Navigation("Batters");

                    b.Navigation("Fielders");

                    b.Navigation("Pitchers");
                });

            modelBuilder.Entity("BaseballApi.Models.Game", b =>
                {
                    b.Navigation("BoxScore");
                });

            modelBuilder.Entity("BaseballApi.Park", b =>
                {
                    b.Navigation("AlternateParkNames");
                });

            modelBuilder.Entity("BaseballApi.Team", b =>
                {
                    b.Navigation("AlternateTeamNames");
                });
#pragma warning restore 612, 618
        }
    }
}
